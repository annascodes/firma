generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String              @id @default(cuid())
    clerkId        String              @unique
    email          String?             @unique
    name           String?
    image          String?
    memberships    CompanyMembership[]
    assignedTasks  Task[]              @relation("AssignedTasks")
    ownedCompanies Company[]           @relation("UserCompanies")
     joinRequests   CompanyJoinRequest[] 
    createdAt      DateTime            @default(now())
    updatedAt      DateTime            @updatedAt
}

model Company {
    id          String              @id @default(cuid())
    name        String
    ownerId     String
    //   owner      User                 @relation(fields: [ownerId], references: [id])
    owner       User                @relation("UserCompanies", fields: [ownerId], references: [id])
    departments Department[]
    projects    Project[]
    members     CompanyMembership[]
     joinRequests CompanyJoinRequest[]
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt

    @@index([ownerId])
}
model CompanyJoinRequest {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  status    JoinStatus @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, companyId]) // prevent duplicate requests
}

enum JoinStatus {
  PENDING
  APPROVED
  REJECTED
}


model CompanyMembership {
    id        String      @id @default(cuid())
    user      User        @relation(fields: [userId], references: [id])
    userId    String
    company   Company     @relation(fields: [companyId], references: [id])
    companyId String
    role      CompanyRole @default(MEMBER)
    createdAt DateTime    @default(now())

    @@unique([userId, companyId])
}

enum CompanyRole {
    OWNER
    ADMIN
    MANAGER
    MEMBER
    GUEST
}

model Department {
    id        String    @id @default(cuid())
    name      String
    company   Company   @relation(fields: [companyId], references: [id])
    companyId String
    projects  Project[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([companyId])
}

model Project {
    id           String      @id @default(cuid())
    name         String
    description  String?
    company      Company     @relation(fields: [companyId], references: [id])
    companyId    String
    department   Department? @relation(fields: [departmentId], references: [id])
    departmentId String?
    tasks        Task[]
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt

    @@index([companyId])
}

model Task {
    id          String     @id @default(cuid())
    title       String
    description String?
    status      TaskStatus @default(TODO)
    dueAt       DateTime?
    project     Project    @relation(fields: [projectId], references: [id])
    projectId   String
    assignee    User?      @relation("AssignedTasks", fields: [assigneeId], references: [id])
    assigneeId  String?
    priority    Priorities @default(NORMAL)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    @@index([projectId])
}

enum TaskStatus {
    TODO
    IN_PROGRESS
    DONE
    BLOCKED
}

enum Priorities {
    HIGH
    NORMAL
    LOW
}
